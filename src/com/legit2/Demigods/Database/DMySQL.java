/*
	Copyright (c) 2013 The Demigods Team
	
	Demigods License v1
	
	This plugin is provided "as is" and without any warranty.  Any express or
	implied warranties, including, but not limited to, the implied warranties
	of merchantability and fitness for a particular purpose are disclaimed.
	In no event shall the authors be liable to any party for any direct,
	indirect, incidental, special, exemplary, or consequential damages arising
	in any way out of the use or misuse of this plugin.
	
	Definitions
	
	 1. This Plugin is defined as all of the files within any archive
	    file or any group of files released in conjunction by the Demigods Team,
	    the Demigods Team, or a derived or modified work based on such files.
	
	 2. A Modification, or a Mod, is defined as this Plugin or a derivative of
	    it with one or more Modification applied to it, or as any program that
	    depends on this Plugin.
	
	 3. Distribution is defined as allowing one or more other people to in
	    any way download or receive a copy of this Plugin, a Modified
	    Plugin, or a derivative of this Plugin.
	
	 4. The Software is defined as an installed copy of this Plugin, a
	    Modified Plugin, or a derivative of this Plugin.
	
	 5. The Demigods Team is defined as Alexander Chauncey and Alex Bennett
	    of http://www.clashnia.com/.
	
	Agreement
	
	 1. Permission is hereby granted to use, copy, modify and/or
	    distribute this Plugin, provided that:
	
	    a. All copyright notices within source files and as generated by
	       the Software as output are retained, unchanged.
	
	    b. Any Distribution of this Plugin, whether as a Modified Plugin
	       or not, includes this license and is released under the terms
	       of this Agreement. This clause is not dependant upon any
	       measure of changes made to this Plugin.
	
	    c. This Plugin, Modified Plugins, and derivative works may not
	       be sold or released under any paid license without explicit 
	       permission from the Demigods Team. Copying fees for the 
	       transport of this Plugin, support fees for installation or
	       other services, and hosting fees for hosting the Software may,
	       however, be imposed.
	
	    d. Any Distribution of this Plugin, whether as a Modified
	       Plugin or not, requires express written consent from the
	       Demigods Team.
	
	 2. You may make Modifications to this Plugin or a derivative of it,
	    and distribute your Modifications in a form that is separate from
	    the Plugin. The following restrictions apply to this type of
	    Modification:
	
	    a. A Modification must not alter or remove any copyright notices
	       in the Software or Plugin, generated or otherwise.
	
	    b. When a Modification to the Plugin is released, a
	       non-exclusive royalty-free right is granted to the Demigods Team
	       to distribute the Modification in future versions of the
	       Plugin provided such versions remain available under the
	       terms of this Agreement in addition to any other license(s) of
	       the initial developer.
	
	    c. Any Distribution of a Modified Plugin or derivative requires
	       express written consent from the Demigods Team.
	
	 3. Permission is hereby also granted to distribute programs which
	    depend on this Plugin, provided that you do not distribute any
	    Modified Plugin without express written consent.
	
	 4. The Demigods Team reserves the right to change the terms of this
	    Agreement at any time, although those changes are not retroactive
	    to past releases, unless redefining the Demigods Team. Failure to
	    receive notification of a change does not make those changes invalid.
	    A current copy of this Agreement can be found included with the Plugin.
	
	 5. This Agreement will terminate automatically if you fail to comply
	    with the limitations described herein. Upon termination, you must
	    destroy all copies of this Plugin, the Software, and any
	    derivatives within 48 hours.
 */

package com.legit2.Demigods.Database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.legit2.Demigods.Utilities.DConfigUtil;
import com.legit2.Demigods.Utilities.DMiscUtil;

import lib.PatPeter.SQLibrary.MySQL;

public class DMySQL
{
	// Define variables
	private static MySQL mysql;
	
	// Plugin-specific
	public static String plugindata_table = "dg_plugindata";
	public static String divineblocks_table = "dg_divineblocks";

	// Player-specific
	public static String player_table = "dg_players";
	public static String playerdata_table = "dg_playerdata";
	
	// Deity-specific
	public static String deitydata_table = "dg_deitydata";
	
	// DCharacter-specific
	public static String character_table = "dg_characters";
	public static String chardata_table = "dg_chardata";
		
	/*
	 *  initializeDatabase() : Sets up the database and creates user table if needed.
	 */
	public static void initializeMySQL()
	{
		DMiscUtil.info("Initializing MySQL...");
				
		if(checkConnection())
		{
			// Success! Tell the world!
			DMiscUtil.info("MySQL Connection Successful!");
			
			// Create Plugin Data Table
			createTable(
				plugindata_table,
				"entry_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT," +
				"data_id VARCHAR(128)," +
				"datakey VARCHAR(128)," +
				"datavalue VARCHAR(256)"
			);
			
			// Create Divine Block Data Table
			createTable(
				divineblocks_table,
				"entry_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT," +
				"block_id INT(11)," +
				"block_parent INT(11)," +
				"block_type VARCHAR(128)," +
				"block_deity VARCHAR(256)," +
				"block_material INT(11)," +
				"block_bytedata INT(11)," +
				"block_x DOUBLE," +
				"block_y DOUBLE," +
				"block_z DOUBLE," +
				"block_world VARCHAR(24)"
			);
			
			// Create Player Table
			createTable(
				player_table,
				"player_id INT NOT NULL PRIMARY KEY," +
				"player_name VARCHAR(24)," +
				"player_characters VARCHAR(256)," +
				"player_kills INT(11)," +
				"player_deaths INT(11)," +
				"player_firstlogin MEDIUMTEXT," +
				"player_lastlogin MEDIUMTEXT"
			);
			
			// Create Player Data Table
			createTable(
				playerdata_table,
				"entry_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT," +
				"player_id INT," +
				"datakey VARCHAR(128)," +
				"datavalue VARCHAR(256)"
			);
			
			// Create DCharacter Table
			createTable(
				character_table,
				"char_id INT NOT NULL PRIMARY KEY," +
				"player_id INT," +
				"char_active TINYINT(1)," +
				"char_name VARCHAR(14)," +
				"char_deity VARCHAR(24)," +
				"char_alliance VARCHAR(24)," +
				"char_immortal TINYINT(1)," +
				"char_hp INT(11)," +
				"char_exp FLOAT," +
				"char_lastX DOUBLE," +
				"char_lastY DOUBLE," +
				"char_lastZ DOUBLE," +
				"char_lastW VARCHAR(24)," +
				"char_favor INT(11)," +
				"char_max_favor INT(11)," +
				"char_devotion INT(11)," +
				"char_ascensions INT(11)"
			);
			
			// Create DCharacter Data Table
			createTable(
				chardata_table,
				"entry_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT," +
				"char_id INT," +
				"datakey VARCHAR(48)," +
				"datavalue VARCHAR(256)"
			);
			
		}
		else
		{
			// Connection failed... :(
			DMiscUtil.severe("MySQL Connection Failed!");
		}
	}

	/*
	 *  uninitializeDatabase() : Performs final database operations and closes the MySQL connection.
	 */
	public static void uninitializeMySQL()
	{
		DMiscUtil.info("Disabling MySQL...");
		mysql.close();
		DMiscUtil.info("MySQL disabled!");
	}
	
	/*
	 *  createConnection() : Establishes a connection to the MySQL database.
	 */
	public static boolean createConnection()
	{
		String db_name = DConfigUtil.getSettingString("database.mysql.db_name");
		String username = DConfigUtil.getSettingString("database.mysql.username");
		String password = DConfigUtil.getSettingString("database.mysql.password");
		String host = DConfigUtil.getSettingString("database.mysql.host");
		int port = DConfigUtil.getSettingInt("database.mysql.port");
		
		mysql = new MySQL(Logger.getLogger("Minecraft"), "[Demigods] ", host, port, db_name, username, password);
		
		// Initialize handler
		try
		{
			mysql.open();
		}
		catch (Exception e)
		{
			DMiscUtil.severe(e.getMessage());
		}
		
		if(mysql.checkConnection()) return true;
		else return false;
	}
	
	/*
	 *  createTable() : Checks to see if the (String)table exists and if not, create it with (String)options.
	 */
	public static void createTable(String table, String options)
	{
		// Check to see if tables exists, if not then create it
		if(!mysql.isTable(table))
		{
			// Log operation to console
			DMiscUtil.info("Creating table \"" + table + "\"");
			
			// Create the table
			String query = "CREATE TABLE " + table + " (" + options + ");";
			try
			{
				mysql.query(query);
			}
			catch(SQLException e) 
			{
				DMiscUtil.severe("There was a problem with creating table: " + table);
				e.printStackTrace();
			}
			
			// Table creation successful
			DMiscUtil.info("Table \"" + table + "\" created!");
		}
		else
		{
			// do nothing
		}
	}
	
	/*
	 *  checkConnection() : Checks the connection to the MySQL database.
	 */
	public static boolean checkConnection()
	{
		if(mysql.checkConnection()) return true;
		else return false;
	}
	
	/*
	 *  runQuery() : Runs the (String)query on the MySQL database.
	 */
	public static ResultSet runQuery(String query)
	{
		try
		{
			return mysql.query(query);
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			return null;
		}
	}

	/*
	 *  prepareStatement() : Creates a prepared statment from (String)query.
	 */
	public static PreparedStatement prepareStatement(String query)
	{
		try
		{
			return mysql.prepare(query);
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	/*
	 *  dataExists() : Checks to see if (String)value exists under (String)column in (String)table.
	 */
	public static boolean dataExists(String table, String column, String value)
	{
		String query = "SELECT * FROM " + table + " WHERE " + column + " = '" + value + "';";
		ResultSet result = null;
		
		result = runQuery(query);
		
		try
		{
			if(!result.next()) return false;
			else
			{
				return true;
			}
		}
		catch(SQLException e)
		{
			DMiscUtil.severe("There was an error when checking for existing MySQL data:");
			e.printStackTrace();
		}
		return true;
	}
	
	/*
	 *  multDataExists() : Checks to see if (String)value exists under (String)column in (String)table with multiple values.
	 */
	public static boolean multDataExists(String table, String[] column, String[] value)
	{
		String query = "SELECT * FROM " + table + " WHERE " + column[0] + " = '" + value[0] + "' AND " + column[1] + " = '" + value[1] + "';";
		ResultSet result = null;
		
		result = runQuery(query);
		
		try
		{
			if(!result.next()) return false;
			else
			{
				return true;
			}
		}
		catch(SQLException e)
		{
			DMiscUtil.severe("There was an error when checking for existing MySQL data:");
			e.printStackTrace();
		}
		return true;
	}
	
	/*
	 *  getRows() : Returns the number of rows in a query.
	 */
	public static int getRows(ResultSet result)
	{
		int totalRows = 0;
		try
        {
        	result.last();
	        totalRows = result.getRow();
	        result.beforeFirst();
        }
        catch(Exception ex)
        {
        	return 0;
        }
        return totalRows;  
	}

}

