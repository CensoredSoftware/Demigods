/*
	Copyright (c) 2013 The Demigods Team
	
	Demigods License v1
	
	This plugin is provided "as is" and without any warranty.  Any express or
	implied warranties, including, but not limited to, the implied warranties
	of merchantability and fitness for a particular purpose are disclaimed.
	In no event shall the authors be liable to any party for any direct,
	indirect, incidental, special, exemplary, or consequential damages arising
	in any way out of the use or misuse of this plugin.
	
	Definitions
	
	 1. This Plugin is defined as all of the files within any archive
	    file or any group of files released in conjunction by the Demigods Team,
	    the Demigods Team, or a derived or modified work based on such files.
	
	 2. A Modification, or a Mod, is defined as this Plugin or a derivative of
	    it with one or more Modification applied to it, or as any program that
	    depends on this Plugin.
	
	 3. Distribution is defined as allowing one or more other people to in
	    any way download or receive a copy of this Plugin, a Modified
	    Plugin, or a derivative of this Plugin.
	
	 4. The Software is defined as an installed copy of this Plugin, a
	    Modified Plugin, or a derivative of this Plugin.
	
	 5. The Demigods Team is defined as Alexander Chauncey and Alex Bennett
	    of http://www.clashnia.com/.
	
	Agreement
	
	 1. Permission is hereby granted to use, copy, modify and/or
	    distribute this Plugin, provided that:
	
	    a. All copyright notices within source files and as generated by
	       the Software as output are retained, unchanged.
	
	    b. Any Distribution of this Plugin, whether as a Modified Plugin
	       or not, includes this license and is released under the terms
	       of this Agreement. This clause is not dependant upon any
	       measure of changes made to this Plugin.
	
	    c. This Plugin, Modified Plugins, and derivative works may not
	       be sold or released under any paid license without explicit 
	       permission from the Demigods Team. Copying fees for the 
	       transport of this Plugin, support fees for installation or
	       other services, and hosting fees for hosting the Software may,
	       however, be imposed.
	
	    d. Any Distribution of this Plugin, whether as a Modified
	       Plugin or not, requires express written consent from the
	       Demigods Team.
	
	 2. You may make Modifications to this Plugin or a derivative of it,
	    and distribute your Modifications in a form that is separate from
	    the Plugin. The following restrictions apply to this type of
	    Modification:
	
	    a. A Modification must not alter or remove any copyright notices
	       in the Software or Plugin, generated or otherwise.
	
	    b. When a Modification to the Plugin is released, a
	       non-exclusive royalty-free right is granted to the Demigods Team
	       to distribute the Modification in future versions of the
	       Plugin provided such versions remain available under the
	       terms of this Agreement in addition to any other license(s) of
	       the initial developer.
	
	    c. Any Distribution of a Modified Plugin or derivative requires
	       express written consent from the Demigods Team.
	
	 3. Permission is hereby also granted to distribute programs which
	    depend on this Plugin, provided that you do not distribute any
	    Modified Plugin without express written consent.
	
	 4. The Demigods Team reserves the right to change the terms of this
	    Agreement at any time, although those changes are not retroactive
	    to past releases, unless redefining the Demigods Team. Failure to
	    receive notification of a change does not make those changes invalid.
	    A current copy of this Agreement can be found included with the Plugin.
	
	 5. This Agreement will terminate automatically if you fail to comply
	    with the limitations described herein. Upon termination, you must
	    destroy all copies of this Plugin, the Software, and any
	    derivatives within 48 hours.
 */

package com.legit2.Demigods.Utilities;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Logger;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.OfflinePlayer;
import org.bukkit.block.Block;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.util.BlockIterator;

import com.legit2.Demigods.Demigods;
import com.legit2.Demigods.Libraries.DCharacter;

public class DMiscUtil
{
	public static Demigods plugin;
	
	// Define variables
	private static String plugin_name = "Demigods";
	private static Logger log = Logger.getLogger("Minecraft");
	
	public DMiscUtil(Demigods instance)
	{
		plugin = instance;
	}

	/*
	 *  getPlugin() : Returns an instance of the plugin.
	 */
	public static Demigods getPlugin()
	{
		return plugin;
	}
	
	/*
	 *  getImmortalList() : Gets list of currently immortal players.
	 */
	public static ArrayList<Integer> getImmortalList()
	{		
		// Define variables
		ArrayList<Integer> immortalList = new ArrayList<Integer>();
		HashMap<Integer, HashMap<String, Object>> characters = DDataUtil.getAllChars();
		
		for(Entry<Integer, HashMap<String, Object>> character : characters.entrySet())
		{
			int charID = character.getKey();
			HashMap<String, Object> data = character.getValue();
			
			if(data.get("char_immortal") != null && DObjUtil.toBoolean(data.get("char_immortal"))) immortalList.add(charID);
		}
		
		return immortalList;
	}
	
	/*
	 *  areAllied() : Returns true if (Player)player1 is allied with (Player)player2.
	 */
	public static boolean areAllied(Player player1, Player player2)
	{
		String player1Alliance = DPlayerUtil.getCurrentAlliance(player1);
		String player2Alliance = DPlayerUtil.getCurrentAlliance(player2);
		
		if(player1Alliance.equalsIgnoreCase(player2Alliance)) return true;
		else return false;
	}
	
	/*
	 *  customDamage() : Creates custom damage for (LivingEntity)target from (LivingEntity)source with ammount (int)amount.
	 */
	public static void customDamage(LivingEntity source, LivingEntity target, int amount, DamageCause cause)
	{
		if(target instanceof Player)
		{
			if(source instanceof Player)
			{
				target.setLastDamageCause(new EntityDamageByEntityEvent(source, target, cause, amount));
			}
			else target.damage(amount);
		}
		else target.damage(amount);
	}
	
	/*
	 *  taggedMessage() : Sends tagged message (String)msg to the (CommandSender)sender.
	 */
	public static void taggedMessage(CommandSender sender, String msg)
	{
		sender.sendMessage(" ");
		sender.sendMessage(ChatColor.AQUA + " " + plugin_name + " > " + ChatColor.RESET + msg);
		sender.sendMessage(ChatColor.RESET + "-----------------------------------------------------");
	}
	
	/*
	 *  taggedMessage() : Sends tagged message (String)msg to the (CommandSender)sender.
	 */
	public static void customTaggedMessage(CommandSender sender, String title, String msg)
	{
		sender.sendMessage(" ");
		sender.sendMessage(ChatColor.AQUA + " " + plugin_name + " > " + ChatColor.RESET + msg);
		sender.sendMessage(ChatColor.RESET + "-----------------------------------------------------");
	}
	
	/*
	 *  info() : Sends console message with "info" tag.
	 */
	public static void info(String msg)
	{
		log.info("[" + plugin_name + "] " + msg);
	}
	
	/*
	 *  warning() : Sends console message with "warning" tag.
	 */
	public static void warning(String msg)
	{
		log.warning("[" + plugin_name + "] " + msg);
	}
	
	/*
	 *  severe() : Sends console message with "severe" tag.
	 */
	public static void severe(String msg)
	{
		log.severe("[" + plugin_name + "] " + msg);
	}
	
	/*
	 *  serverMsg() : Send (String)msg to the server chat.
	 */
	public static void serverMsg(String msg)
	{
		plugin.getServer().broadcastMessage(msg);
	}
	
	/*
	 *  hasPermission() : Checks if (Player)player has permission (String)permission.
	 */
	public static boolean hasPermission(Player player, String permission)
	{
		if(player == null) return true;
		return player.hasPermission(permission);
	}
	
	/*
	 *  hasPermissionOrOP() : Checks if (Player)player has permission (String)permission, or is OP.
	 */
	public static boolean hasPermissionOrOP(Player player, String permission)
	{
		if(player == null) return true;
		if(player.isOp()) return true;
		return player.hasPermission(permission);
	}
	
	/*
	 *  noPermission() : Command sender does not have permission to run command.
	 */
	public static boolean noPermission(Player player)
	{
		player.sendMessage(ChatColor.RED + "You do not have permission to run this command.");
		return true;
	}
	
	/*
	 *  noConsole() : Sends a permission denial message to the console.
	 */
	public static boolean noConsole(CommandSender sender)
	{
		sender.sendMessage("This command can only be executed by a player.");
		return true;
	}
	
	/*
	 *  noPlayer() : Sends a permission denial message to the console.
	 */
	public static boolean noPlayer(CommandSender sender)
	{
		sender.sendMessage("This command can only be executed by the console.");
		return true;
	}
	
	/*
	 *  canUseDeity() : Checks is a player can use a specfic deity and returns a message
	 */
	public static boolean canUseDeity(Player player, String deity)
	{		
		DCharacter character = DPlayerUtil.getCurrentChar(player);
		
		// Check the player for DEITYNAME
		if(character != null && !character.hasDeity(deity))
		{
			player.sendMessage(ChatColor.RED + "You haven't claimed " + deity + "! You can't do that!");
			return false;
		}
		else if(character == null || !character.isImmortal())
		{
			player.sendMessage(ChatColor.RED + "You can't do that, mortal!");
			return false;
		}
		return true;
	}
	
	/*
	 *  canUseDeitySilent() : Checks is a player can use a specfic deity without returning a message.
	 */
	public static boolean canUseDeitySilent(Player player, String deity)
	{		
		DCharacter character = DPlayerUtil.getCurrentChar(player);

		if(character == null) return false;
		
		// Check the player for DEITYNAME
		if(!character.hasDeity(deity)) return false;
		else if(!character.isImmortal()) return false;
		else return true;
	}
	
	/*
	 *  canTarget() : Checks if PVP is allowed in (Location)fallback for (Entity)player.
	 */
    public static boolean canTarget(Entity player, Location fallback)
    {     
    	if(!(player instanceof Player)) return true;
    	else if(DDataUtil.hasPlayerData((Player) player, "temp_was_PVP") && DConfigUtil.getSettingBoolean("use_dynamic_pvp_zones")) return true;
    	else return !DZoneUtil.zoneNoPVP(fallback);
    }
    public static boolean canTarget(Entity player)
    {     
    	Location location = player.getLocation();
    	return canTarget(player, location);
    }
    
    /*
	 *  autoTarget() : Returns the LivingEntity a (Player)player is targeting.
	 */
    public static LivingEntity autoTarget(Player player)
    {
    	BlockIterator iterator = new BlockIterator(player.getWorld(), player.getLocation().toVector(), player.getEyeLocation().getDirection(), 0, 100);
        
        while (iterator.hasNext())
        {
            Block item = iterator.next();
            for(Entity entity : player.getNearbyEntities(100, 100, 100))
            {
            	if(entity instanceof LivingEntity)
            	{
	                int acc = 2;
	                for(int x = -acc; x < acc; x++)
	                {
	                    for(int z = -acc; z < acc; z++)
	                    {
	                        for(int y = -acc; y < acc; y++)
	                        {
	                            if(entity.getLocation().getBlock().getRelative(x, y, z).equals(item)) return (LivingEntity) entity;
	                        }
	                    }
	                }
            	}
            }
        }
        return null;
    }
    
    /*
	 *  togglePlayerStuck() : Toggles holding a player's feet in place.
	 */
    public static void togglePlayerStuck(OfflinePlayer player, boolean option)
    {
    	if(DDataUtil.hasPlayerData(player, "temp_player_hold") && !option) DDataUtil.removePlayerData(player, "temp_player_hold");
    	else DDataUtil.savePlayerData(player, "temp_player_hold", true);
    }
    
    /*
	 *  togglePlayerChat() : Toggles chat for a player.
	 */
    public static void togglePlayerChat(OfflinePlayer player, boolean option)
    {
    	if(DDataUtil.hasPlayerData(player, "temp_no_chat") && option) DDataUtil.removePlayerData(player, "temp_no_chat");
    	else DDataUtil.savePlayerData(player, "temp_no_chat", true);
    }
}