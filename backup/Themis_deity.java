/*
	Copyright (c) 2013 The Demigods Team
	
	Demigods License v1
	
	This plugin is provided "as is" and without any warranty.  Any express or
	implied warranties, including, but not limited to, the implied warranties
	of merchantability and fitness for a particular purpose are disclaimed.
	In no event shall the authors be liable to any party for any direct,
	indirect, incidental, special, exemplary, or consequential damages arising
	in any way out of the use or misuse of this plugin.
	
	Definitions
	
	 1. This Plugin is defined as all of the files within any archive
	    file or any group of files released in conjunction by the Demigods Team,
	    the Demigods Team, or a derived or modified work based on such files.
	
	 2. A Modification, or a Mod, is defined as this Plugin or a derivative of
	    it with one or more Modification applied to it, or as any program that
	    depends on this Plugin.
	
	 3. Distribution is defined as allowing one or more other people to in
	    any way download or receive a copy of this Plugin, a Modified
	    Plugin, or a derivative of this Plugin.
	
	 4. The Software is defined as an installed copy of this Plugin, a
	    Modified Plugin, or a derivative of this Plugin.
	
	 5. The Demigods Team is defined as Alexander Chauncey and Alex Bennett
	    of http://www.clashnia.com/.
	
	Agreement
	
	 1. Permission is hereby granted to use, copy, modify and/or
	    distribute this Plugin, provided that:
	
	    a. All copyright notices within source files and as generated by
	       the Software as output are retained, unchanged.
	
	    b. Any Distribution of this Plugin, whether as a Modified Plugin
	       or not, includes this license and is released under the terms
	       of this Agreement. This clause is not dependant upon any
	       measure of changes made to this Plugin.
	
	    c. This Plugin, Modified Plugins, and derivative works may not
	       be sold or released under any paid license without explicit 
	       permission from the Demigods Team. Copying fees for the 
	       transport of this Plugin, support fees for installation or
	       other services, and hosting fees for hosting the Software may,
	       however, be imposed.
	
	    d. Any Distribution of this Plugin, whether as a Modified
	       Plugin or not, requires express written consent from the
	       Demigods Team.
	
	 2. You may make Modifications to this Plugin or a derivative of it,
	    and distribute your Modifications in a form that is separate from
	    the Plugin. The following restrictions apply to this type of
	    Modification:
	
	    a. A Modification must not alter or remove any copyright notices
	       in the Software or Plugin, generated or otherwise.
	
	    b. When a Modification to the Plugin is released, a
	       non-exclusive royalty-free right is granted to the Demigods Team
	       to distribute the Modification in future versions of the
	       Plugin provided such versions remain available under the
	       terms of this Agreement in addition to any other license(s) of
	       the initial developer.
	
	    c. Any Distribution of a Modified Plugin or derivative requires
	       express written consent from the Demigods Team.
	
	 3. Permission is hereby also granted to distribute programs which
	    depend on this Plugin, provided that you do not distribute any
	    Modified Plugin without express written consent.
	
	 4. The Demigods Team reserves the right to change the terms of this
	    Agreement at any time, although those changes are not retroactive
	    to past releases, unless redefining the Demigods Team. Failure to
	    receive notification of a change does not make those changes invalid.
	    A current copy of this Agreement can be found included with the Plugin.
	
	 5. This Agreement will terminate automatically if you fail to comply
	    with the limitations described herein. Upon termination, you must
	    destroy all copies of this Plugin, the Software, and any
	    derivatives within 48 hours.
 */

package com.legit2.Demigods.Deities.Titans;

import java.util.ArrayList;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;

import com.legit2.Demigods.Utilities.DAbilityUtil;
import com.legit2.Demigods.Utilities.DCharUtil;
import com.legit2.Demigods.Utilities.DDataUtil;
import com.legit2.Demigods.Utilities.DPlayerUtil;
import com.legit2.Demigods.Utilities.DMiscUtil;

public class Themis_deity implements Listener
{	
	// Create required universal deity variables
	private static final String DEITYNAME = "Themis";
	private static final String DEITYALLIANCE = "Titan";
	private static final ChatColor DEITYCOLOR = ChatColor.GRAY;

	/*
	 *  Set deity-specific ability variable(s).
	 */
	// "/swap" Command:
	private static String SWAP_NAME = "Swap"; // Sets the name of this command
	private static long SWAP_TIME; // Creates the variable for later use
	private static final int SWAP_COST = 310; // Cost to run command in "favor"
	private static final int SWAP_DELAY = 2400; // In milliseconds

	// "/congregate" Command:
	@SuppressWarnings("unused")
	private static String ULTIMATE_NAME = "Congregate";
	private static long ULTIMATE_TIME; // Creates the variable for later use
	private static final int ULTIMATE_COST = 6000; // Cost to run command in "favor"
	private static final int ULTIMATE_COOLDOWN_MAX = 1200; // In seconds
	private static final int ULTIMATE_COOLDOWN_MIN = 500; // In seconds

	public ArrayList<Material> getClaimItems()
	{
		ArrayList<Material> claimItems = new ArrayList<Material>();
		
		// Add new items in this format: claimItems.add(Material.NAME_OF_MATERIAL);
		claimItems.add(Material.COMPASS);
		claimItems.add(Material.PAPER);
		
		return claimItems;
	}

	public ArrayList<String> getInfo(Player player)
	{		
		ArrayList<String> toReturn = new ArrayList<String>();
		
		if(DMiscUtil.canUseDeitySilent(player, DEITYNAME))
		{
			toReturn.add(" "); //TODO
			toReturn.add(ChatColor.AQUA + " Demigods > " + ChatColor.RESET + DEITYCOLOR + DEITYNAME);
			toReturn.add(ChatColor.RESET + "-----------------------------------------------------");
			toReturn.add(ChatColor.YELLOW + " Active:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.GREEN + "/swap" + ChatColor.WHITE + " - Trade places with your enemy.");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " Passive:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.WHITE + "None.");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " Ultimate:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.GREEN + "/congregate" + ChatColor.WHITE + " - Bring everyone together for party time!");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " You are a follower of " + DEITYNAME + "!");
			toReturn.add(" ");

			return toReturn;
		}
		else
		{						
			toReturn.add(" "); //TODO
			toReturn.add(ChatColor.AQUA + " Demigods > " + ChatColor.RESET + DEITYCOLOR + DEITYNAME);
			toReturn.add(ChatColor.RESET + "-----------------------------------------------------");
			toReturn.add(ChatColor.YELLOW + " Active:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.GREEN + "/swap" + ChatColor.WHITE + " - Trade places with your enemy.");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " Passive:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.WHITE + "None.");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " Ultimate:");
			toReturn.add(ChatColor.GRAY + " -> " + ChatColor.GREEN + "/congregate" + ChatColor.WHITE + " - Bring everyone together for party time!");
			toReturn.add(" ");
			toReturn.add(ChatColor.YELLOW + " Claim Items:");
			for(Material item : getClaimItems())
			{
				toReturn.add(ChatColor.GRAY + " -> " + ChatColor.WHITE + item.name());
			}
			toReturn.add(" ");

			return toReturn;
		}
	}

	@EventHandler(priority = EventPriority.HIGHEST)
	public static void onPlayerInteract(PlayerInteractEvent interactEvent)
	{
		// Set variables
		Player player = interactEvent.getPlayer();

		if(!DMiscUtil.canUseDeitySilent(player, DEITYNAME)) return;

		if(DCharUtil.isEnabledAbility(player, SWAP_NAME) || ((player.getItemInHand() != null) && (player.getItemInHand().getType() == DCharUtil.getBind(player, SWAP_NAME))))
		{
			if(!DCharUtil.isCooledDown(player, SWAP_NAME, SWAP_TIME, false)) return;

			swap(player);
		}
	}

	/* ------------------
	 *  Command Handlers
	 * ------------------
	 *
	 *  Command: "/swap"
	 */
	public static void swapCommand(Player player, String[] args)
	{
		if(!DMiscUtil.hasPermissionOrOP(player, "demigods." + DEITYALLIANCE + "." + DEITYNAME)) return;
		
		if(!DMiscUtil.canUseDeity(player, DEITYNAME)) return;

		if(args.length == 2 && args[1].equalsIgnoreCase("bind"))
		{		
			// Bind item
			DCharUtil.setBound(player, SWAP_NAME, player.getItemInHand().getType());
		}
		else
		{
			if(DCharUtil.isEnabledAbility(player, SWAP_NAME))
			{
				DCharUtil.disableAbility(player, SWAP_NAME);
				player.sendMessage(ChatColor.YELLOW + SWAP_NAME + " is no longer active.");
			}
			else
			{
				DCharUtil.enableAbility(player, SWAP_NAME);
				player.sendMessage(ChatColor.YELLOW + SWAP_NAME + " is now active.");
			}
		}
	}

	// The actual ability command
	public static void swap(Player player)
	{
		// Define variables
		int charID = DPlayerUtil.getCurrentChar(player);
		Location between = player.getLocation();
		LivingEntity target = DMiscUtil.autoTarget(player);
		
		if(!DAbilityUtil.doAbilityPreProcess(player, target, SWAP_COST)) return;
		SWAP_TIME = System.currentTimeMillis() + SWAP_DELAY;
		DCharUtil.subtractFavor(charID, SWAP_COST);

		player.teleport(target.getLocation());
		target.teleport(between);
	}
	
	/*
	 *  Command: "/assemble"
	 */
	public static void assembleCommand(Player player, String[] args)
	{	
		int charID = DPlayerUtil.getCurrentChar(player);
		
		if(!DCharUtil.isImmortal(player)) return;
		if(!DDataUtil.hasCharData(charID, "temp_themis_congregate")) return;
		for(Player pl : player.getWorld().getPlayers())
		{
			if(DCharUtil.isImmortal(pl) && DDataUtil.hasCharData(DPlayerUtil.getCurrentChar(pl), "temp_themis_congregate_call"))
			{
				DDataUtil.removeCharData(charID, "temp_themis_congregate");
				player.teleport(pl.getLocation());
				return;
			}
		}
		player.sendMessage(ChatColor.YELLOW + "Unable to reach the congregation's location.");
	}

	/*
	 *  Command: "/congregate"
	 */
	public static void congregateCommand(Player player, String[] args)
	{
		if(!DMiscUtil.hasPermissionOrOP(player, "demigods." + DEITYALLIANCE + "." + DEITYNAME + ".ultimate")) return;
		
		// Set variables
		int charID = DPlayerUtil.getCurrentChar(player);
		
		// Check the player for DEITYNAME
		if(!DCharUtil.hasDeity(charID, DEITYNAME)) return;

		// Check if the ultimate has cooled down or not
		if(System.currentTimeMillis() < ULTIMATE_TIME)
		{
			player.sendMessage(ChatColor.YELLOW + "You cannot use the " + DEITYNAME + " ultimate again for " + ChatColor.WHITE + ((((ULTIMATE_TIME)/1000)-(System.currentTimeMillis()/1000)))/60 + " minutes");
			player.sendMessage(ChatColor.YELLOW + "and " + ChatColor.WHITE + ((((ULTIMATE_TIME)/1000)-(System.currentTimeMillis()/1000))%60)+" seconds.");
			return;
		}

		// Perform ultimate if there is enough favor
		if(!DAbilityUtil.doAbilityPreProcess(player, ULTIMATE_COST)) return;
		
		int n = congregate(player);
		if(n > 0) player.sendMessage(ChatColor.YELLOW + "Themis has called upon " + n + " players!");
		else player.sendMessage(ChatColor.YELLOW + "There are no players to congregate.");
		

		// Set favor and cooldown
		DCharUtil.subtractFavor(charID, ULTIMATE_COST);
		player.setNoDamageTicks(1000);
		int cooldownMultiplier = (int)(ULTIMATE_COOLDOWN_MAX - ((ULTIMATE_COOLDOWN_MAX - ULTIMATE_COOLDOWN_MIN)*((double)DCharUtil.getAscensions(charID) / 100)));
		ULTIMATE_TIME = System.currentTimeMillis() + cooldownMultiplier * 1000;
	}
	
	// The actual ability command
	public static int congregate(Player player)
	{
		// Define variables
		int charID = DPlayerUtil.getCurrentChar(player);
		
		DDataUtil.saveTimedCharData(charID, "temp_themis_congregate_call", true, 60);
		
		int count = 0;	
		for(Player pl : player.getWorld().getPlayers())
		{
			if(pl == player) continue;
			if(DCharUtil.isImmortal(pl))
			{
				count++;
				if(!player.equals(pl) && !DDataUtil.hasCharData(charID, "temp_themis_congregate"))
				{
					pl.sendMessage(ChatColor.GOLD + "Themis has called for an assembly of deities at " + player.getName() + "'s location.");
					pl.sendMessage(ChatColor.GOLD + "Type " + ChatColor.WHITE + "/assemble" + ChatColor.GOLD + " to be teleported.");
					pl.sendMessage(ChatColor.GRAY + "You have one minute to answer the invitation.");
					DDataUtil.saveTimedCharData(charID, "temp_themis_congregate", true, 60);
				}
			}
		}
		
		return count;
	}
	
	// Don't touch these, they're required to work.
	public String loadDeity()
	{
		DMiscUtil.plugin.getServer().getPluginManager().registerEvents(this, DMiscUtil.plugin);
		ULTIMATE_TIME = System.currentTimeMillis();
		SWAP_TIME = System.currentTimeMillis();
		return DEITYNAME + " loaded.";
	}
	public static ArrayList<String> getCommands()
	{
		ArrayList<String> COMMANDS = new ArrayList<String>();
		
		// List all commands
		COMMANDS.add("swap");
		COMMANDS.add("assemble");
		COMMANDS.add("congregate");
		
		return COMMANDS;
	}
	public static String getName() { return DEITYNAME; }
	public static String getAlliance() { return DEITYALLIANCE; }
	public static ChatColor getColor() { return DEITYCOLOR; }
}